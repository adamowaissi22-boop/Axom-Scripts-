
local AroticUi = {}
AroticUi.__index = AroticUi

local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")

local Theme = {
	Background = Color3.fromRGB(25, 25, 30),
	Accent = Color3.fromRGB(0, 170, 255),
	Button = Color3.fromRGB(35,35,40),
	ToggleOn = Color3.fromRGB(0,200,120),
	ToggleOff = Color3.fromRGB(70,70,70),
	Text = Color3.fromRGB(240,240,240)
}

local function MakeDraggable(Frame, DragHandle)
	DragHandle = DragHandle or Frame
	local dragging, dragInput, dragStart, startPos
	DragHandle.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			dragging = true
			dragStart = input.Position
			startPos = Frame.Position
			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					dragging = false
				end
			end)
		end
	end)
	DragHandle.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement then
			dragInput = input
		end
	end)
	UserInputService.InputChanged:Connect(function(input)
		if input == dragInput and dragging then
			local delta = input.Position - dragStart
			Frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
		end
	end)
end

local function AnimateHover(Button, Color1, Color2)
	Button.MouseEnter:Connect(function()
		TweenService:Create(Button, TweenInfo.new(0.2), {BackgroundColor3=Color2}):Play()
	end)
	Button.MouseLeave:Connect(function()
		TweenService:Create(Button, TweenInfo.new(0.2), {BackgroundColor3=Color1}):Play()
	end)
end

function AroticUi:CreateWindow(config)
	local self = setmetatable({}, AroticUi)
	local Title = config.Title or "AroticUi"
	local Subtitle = config.Subtitle or "Made by Axom"
	local gui = Instance.new("ScreenGui")
	gui.Name = "AroticUi"
	gui.Parent = Players.LocalPlayer:WaitForChild("PlayerGui")
	local loadFrame = Instance.new("Frame")
	loadFrame.Size = UDim2.new(0,0,0,0)
	loadFrame.Position = UDim2.new(0.5, -300,0.5,-200)
	loadFrame.BackgroundColor3 = Theme.Background
	loadFrame.AnchorPoint = Vector2.new(0.5,0.5)
	loadFrame.Parent = gui
	local corner = Instance.new("UICorner", loadFrame)
	corner.CornerRadius = UDim.new(0,12)
	local TitleLabel = Instance.new("TextLabel")
	TitleLabel.Size = UDim2.new(1,0,0,50)
	TitleLabel.Position = UDim2.new(0,0,0,10)
	TitleLabel.BackgroundTransparency = 1
	TitleLabel.Text = Title
	TitleLabel.TextColor3 = Theme.Accent
	TitleLabel.TextScaled = true
	TitleLabel.Parent = loadFrame
	local SubLabel = Instance.new("TextLabel")
	SubLabel.Size = UDim2.new(1,0,0,40)
	SubLabel.Position = UDim2.new(0,0,0,60)
	SubLabel.BackgroundTransparency = 1
	SubLabel.Text = Subtitle
	SubLabel.TextColor3 = Theme.Text
	SubLabel.TextScaled = true
	SubLabel.Parent = loadFrame
	TweenService:Create(loadFrame,TweenInfo.new(0.8,Enum.EasingStyle.Elastic,Enum.EasingDirection.Out),{Size=UDim2.new(0,300,0,150)}):Play()
	task.wait(4)
	TweenService:Create(loadFrame,TweenInfo.new(0.8,Enum.EasingStyle.Quart,Enum.EasingDirection.Out),{Size=UDim2.new(0,600,0,400)}):Play()
	MakeDraggable(loadFrame, TitleLabel)
	local CloseBtn = Instance.new("TextButton")
	CloseBtn.Size = UDim2.new(0,30,0,30)
	CloseBtn.Position = UDim2.new(1,-35,0,5)
	CloseBtn.Text = "X"
	CloseBtn.TextScaled = true
	CloseBtn.BackgroundColor3 = Theme.Button
	CloseBtn.TextColor3 = Theme.Text
	CloseBtn.Parent = loadFrame
	Instance.new("UICorner", CloseBtn)
	AnimateHover(CloseBtn, Theme.Button, Theme.Accent)
	local HideBtn = Instance.new("TextButton")
	HideBtn.Size = UDim2.new(0,30,0,30)
	HideBtn.Position = UDim2.new(1,-70,0,5)
	HideBtn.Text = "-"
	HideBtn.TextScaled = true
	HideBtn.BackgroundColor3 = Theme.Button
	HideBtn.TextColor3 = Theme.Text
	HideBtn.Parent = loadFrame
	Instance.new("UICorner", HideBtn)
	AnimateHover(HideBtn, Theme.Button, Theme.Accent)
	local ShowBtn = Instance.new("TextButton")
	ShowBtn.Size = UDim2.new(0,100,0,40)
	ShowBtn.Position = UDim2.new(0.5,-50,0,0)
	ShowBtn.Text = "Show Ui"
	ShowBtn.Visible = false
	ShowBtn.BackgroundColor3 = Theme.Button
	ShowBtn.TextColor3 = Theme.Text
	ShowBtn.Parent = gui
	Instance.new("UICorner", ShowBtn)
	AnimateHover(ShowBtn, Theme.Button, Theme.Accent)
	CloseBtn.MouseButton1Click:Connect(function() gui:Destroy() end)
	HideBtn.MouseButton1Click:Connect(function()
		TweenService:Create(loadFrame,TweenInfo.new(0.3,Enum.EasingStyle.Quart),{Position=UDim2.new(0.5,-300,0,-400)}):Play()
		task.wait(0.3)
		loadFrame.Visible=false
		ShowBtn.Visible=true
	end)
	ShowBtn.MouseButton1Click:Connect(function()
		loadFrame.Visible=true
		TweenService:Create(loadFrame,TweenInfo.new(0.3,Enum.EasingStyle.Quart),{Position=UDim2.new(0.5,-300,0.5,-200)}):Play()
		ShowBtn.Visible=false
	end)
	local TabHolder = Instance.new("Frame")
	TabHolder.Size = UDim2.new(0,150,1,0)
	TabHolder.Position = UDim2.new(0,0,0,0)
	TabHolder.BackgroundColor3 = Theme.Button
	TabHolder.Parent = loadFrame
	local tabGradient = Instance.new("UIGradient",TabHolder)
	tabGradient.Color = ColorSequence.new(Theme.Button, Theme.Accent)
	Instance.new("UICorner", TabHolder)
	local ContentHolder = Instance.new("Frame")
	ContentHolder.Size = UDim2.new(1,-150,1,0)
	ContentHolder.Position = UDim2.new(0,150,0,0)
	ContentHolder.BackgroundColor3 = Theme.Background
	ContentHolder.Parent = loadFrame
	Instance.new("UICorner", ContentHolder)
	self.Gui = gui
	self.Main = loadFrame
	self.Tabs = {}
	self.TabHolder = TabHolder
	self.ContentHolder = ContentHolder
	return self
end

function AroticUi:CreateTab(name)
	local Tab = {}
	Tab.Name = name
	local Button = Instance.new("TextButton")
	Button.Size = UDim2.new(1,0,0,50)
	Button.Text = name
	Button.TextScaled = true
	Button.BackgroundColor3 = Theme.Button
	Button.TextColor3 = Theme.Text
	Button.Parent = self.TabHolder
	local tabGradient = Instance.new("UIGradient",Button)
	tabGradient.Color = ColorSequence.new(Theme.Button, Theme.Accent)
	Instance.new("UICorner", Button)
	AnimateHover(Button, Theme.Button, Theme.Accent)
	local Container = Instance.new("Frame")
	Container.Size = UDim2.new(1,0,1,0)
	Container.BackgroundTransparency = 1
	Container.Visible = false
	Container.Parent = self.ContentHolder
	Tab.Container = Container
	Button.MouseButton1Click:Connect(function()
		for _,v in pairs(self.Tabs) do
			v.Container.Visible=false
		end
		Container.Visible=true
	end)
	function Tab:CreateButton(config)
		local btn = Instance.new("TextButton")
		btn.Size = UDim2.new(0,200,0,40)
		btn.Position = UDim2.new(0,20,#self.Container:GetChildren()*50,0)
		btn.Text = config.Name or "Button"
		btn.BackgroundColor3 = Theme.Button
		btn.TextColor3 = Theme.Text
		btn.Parent = self.Container
		local grad = Instance.new("UIGradient",btn)
		grad.Color = ColorSequence.new(Theme.Button, Theme.Accent)
		Instance.new("UICorner", btn)
		AnimateHover(btn, Theme.Button, Theme.Accent)
		btn.MouseButton1Click:Connect(function()
			if config.Callback then config.Callback() end
		end)
		return btn
	end
	function Tab:CreateToggle(config)
		local frame = Instance.new("Frame")
		frame.Size = UDim2.new(0,200,0,40)
		frame.Position = UDim2.new(0,20,#self.Container:GetChildren()*50,0)
		frame.BackgroundColor3 = Theme.Button
		frame.Parent = self.Container
Instance.new("UICorner", frame)
		local label = Instance.new("TextLabel")
		label.Size = UDim2.new(0.6,0,1,0)
		label.Position = UDim2.new(0,0,0,0)
		label.BackgroundTransparency = 1
		label.Text = config.Name or "Toggle"
		label.TextColor3 = Theme.Text
		label.TextScaled = true
		label.Parent = frame
		local switch = Instance.new("Frame")
		switch.Size = UDim2.new(0,50,0,25)
		switch.Position = UDim2.new(0.7,0,0.5,-12)
		switch.BackgroundColor3 = Theme.ToggleOff
		switch.Parent = frame
		Instance.new("UICorner", switch)
		local knob = Instance.new("Frame")
		knob.Size = UDim2.new(0,20,0,20)
		knob.Position = UDim2.new(0,2,0.5,-10)
		knob.BackgroundColor3 = Theme.Text
		knob.Parent = switch
		Instance.new("UICorner", knob)
		local state = false
		local function toggle(val)
			state=val
			if state then
				switch.BackgroundColor3 = Theme.ToggleOn
				TweenService:Create(knob,TweenInfo.new(0.2,Enum.EasingStyle.Quad),{Position=UDim2.new(1,-22,0.5,-10)}):Play()
			else
				switch.BackgroundColor3 = Theme.ToggleOff
				TweenService:Create(knob,TweenInfo.new(0.2,Enum.EasingStyle.Quad),{Position=UDim2.new(0,2,0.5,-10)}):Play()
			end
			if config.Callback then config.Callback(state) end
		end
		switch.InputBegan:Connect(function(input)
			if input.UserInputType==Enum.UserInputType.MouseButton1 then
				toggle(not state)
			end
		end)
		return frame
	end
	function Tab:CreateSlider(config)
		local frame = Instance.new("Frame")
		frame.Size = UDim2.new(0,200,0,50)
		frame.Position = UDim2.new(0,20,#self.Container:GetChildren()*50,0)
		frame.BackgroundColor3 = Theme.Button
		frame.Parent = self.Container
		Instance.new("UICorner", frame)
		local label = Instance.new("TextLabel")
		label.Size = UDim2.new(1,0,0,20)
		label.BackgroundTransparency = 1
		label.Text = config.Name.." : "..tostring(config.Default or 0)
		label.TextColor3 = Theme.Text
		label.TextScaled = true
		label.Parent = frame
		local sliderBg = Instance.new("Frame")
		sliderBg.Size = UDim2.new(1,-20,0,10)
		sliderBg.Position = UDim2.new(0,10,0,30)
		sliderBg.BackgroundColor3 = Theme.ToggleOff
		sliderBg.Parent = frame
		Instance.new("UICorner", sliderBg)
		local sliderKnob = Instance.new("Frame")
		sliderKnob.Size = UDim2.new(0,15,0,15)
		sliderKnob.Position = UDim2.new(((config.Default or 0)-(config.Min or 0))/((config.Max or 100)-(config.Min or 0)),0,0.5,-7)
		sliderKnob.BackgroundColor3 = Theme.Accent
		sliderKnob.Parent = sliderBg
		Instance.new("UICorner", sliderKnob)
		local dragging = false
		sliderKnob.InputBegan:Connect(function(input)
			if input.UserInputType==Enum.UserInputType.MouseButton1 then
				dragging=true
			end
		end)
		sliderKnob.InputEnded:Connect(function(input)
			if input.UserInputType==Enum.UserInputType.MouseButton1 then
				dragging=false
			end
		end)
		UserInputService.InputChanged:Connect(function(input)
			if dragging and input.UserInputType==Enum.UserInputType.MouseMovement then
				local pos = math.clamp((input.Position.X - sliderBg.AbsolutePosition.X)/sliderBg.AbsoluteSize.X,0,1)
				sliderKnob.Position = UDim2.new(pos,0,0.5,-7)
				local val = math.floor((pos*((config.Max or 100)-(config.Min or 0)))+(config.Min or 0))
				label.Text = config.Name.." : "..val
				if config.Callback then config.Callback(val) end
			end
		end)
		return frame
	end
	function Tab:CreateTextbox(config)
		local box = Instance.new("TextBox")
		box.Size = UDim2.new(0,200,0,40)
		box.Position = UDim2.new(0,20,#self.Container:GetChildren()*50,0)
		box.BackgroundColor3 = Theme.Button
		box.TextColor3 = Theme.Text
		box.Text = config.Placeholder or ""
		box.TextScaled = true
		box.ClearTextOnFocus = false
		box.Parent = self.Container
		Instance.new("UICorner", box)
		box.FocusLost:Connect(function()
			if config.Callback then
				config.Callback(box.Text)
			end
		end)
		return box
	end
	table.insert(self.Tabs, Tab)
	return Tab
end

function AroticUi:CreateSettings()
	local Tab = self:CreateTab("Settings")
	Tab:CreateColorPicker = function(name,default,callback)
		local frame = Tab:CreateSlider({
			Name = name,
			Min = 0,
			Max = 255,
			Default = default or 255,
			Callback = callback
		})
		return frame
	end
	return Tab
end

function AroticUi:CreateCredits()
	local Tab = self:CreateTab("Credits")
	local label = Instance.new("TextLabel")
	label.Size = UDim2.new(1,0,1,0)
	label.BackgroundTransparency = 1
	label.Text = "Owner / Creator Of the Ui: Axom (Adam Owaissi)"
	label.TextColor3 = Theme.Text
	label.TextScaled = true
	label.Parent = Tab.Container
	return Tab
end

return AroticUi
